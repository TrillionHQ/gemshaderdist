{"version":3,"file":"main-COj9CRpu.js","sources":["../../node_modules/three/examples/jsm/loaders/RGBELoader.js","../../utils.js","../../shaders/emeraldVert.glsl","../../shaders/emeraldFrag.glsl","../../main.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearFilter,\n\tLinearSRGBColorSpace\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: throw new Error( 'THREE.RGBELoader: Read Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_write_error: throw new Error( 'THREE.RGBELoader: Write Error: ' + ( msg || '' ) );\n\t\t\t\t\tcase rgbe_format_error: throw new Error( 'THREE.RGBELoader: Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: throw new Error( 'THREE.RGBELoader: Memory Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\trgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\trgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\trgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tconst w = rgbe_header_info.width,\n\t\t\th = rgbe_header_info.height,\n\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\n\t\tlet data, type;\n\t\tlet numElements;\n\n\t\tswitch ( this.type ) {\n\n\t\t\tcase FloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = floatArray;\n\t\t\t\ttype = FloatType;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t}\n\n\t\t\t\tdata = halfArray;\n\t\t\t\ttype = HalfFloatType;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow new Error( 'THREE.RGBELoader: Unsupported type: ' + this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn {\n\t\t\twidth: w, height: h,\n\t\t\tdata: data,\n\t\t\theader: rgbe_header_info.string,\n\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\texposure: rgbe_header_info.exposure,\n\t\t\ttype: type\n\t\t};\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.colorSpace = LinearSRGBColorSpace;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n","import * as THREE from \"three\";\r\n\r\n\r\nconst physicalMaterialPropsExceptions = {\r\n    \"version\": true,\r\n    \"defines\": true,\r\n    \"userData\": true,\r\n    \"isMaterial\": true,\r\n    \"isMeshStandardMaterial\": true,\r\n    \"isMeshPhysicalMaterial\": true,\r\n    \"type\": true,\r\n    \"name\": true,\r\n    \"uuid\": true,\r\n};\r\n\r\nconst physicalMaterialCustomSetups = {\r\n    \"bounces\": {\r\n        min: 1,\r\n        max: 16,\r\n        step: 1\r\n    },\r\n    \"roughness\": {\r\n        min: 0,\r\n        max: 1,\r\n        step: .001\r\n    },\r\n    \"thickness\": {\r\n        min: 0,\r\n        max: 1000,\r\n        step: .1\r\n    },\r\n    \"specularIntensity\": {\r\n        min: 0,\r\n        max: 1,\r\n        step: .01\r\n    },\r\n    \"ior\": {\r\n        min: 1,\r\n        max: 3.33,\r\n        step: .001\r\n    },\r\n    \"iridescenceIOR\": {\r\n        min: 1,\r\n        max: 2.33,\r\n        step: .001\r\n    },\r\n    \"metalness\": {\r\n        min: 0,\r\n        max: 1,\r\n        step: .001\r\n    },\r\n    \"clearcoatRoughness\": {\r\n        min: 0,\r\n        max: 1,\r\n        step: .001\r\n    },\r\n    \"side\": {\r\n        front: THREE.FrontSide,\r\n        back: THREE.BackSide,\r\n        double: THREE.DoubleSide\r\n    }\r\n};\r\n\r\nexport function addUniformsToGui(uniforms, gui)\r\n{\r\n    const f = gui.addFolder(\"uniforms\");\r\n\r\n    const keys = Object.keys(uniforms);\r\n    let i, j;\r\n\r\n    for (j = 0; j < keys.length; j++)\r\n    {\r\n        i = keys[ j ];\r\n        // if (uniforms[i].value instanceof THREE.Color)\r\n        // {\r\n        //     f.addColor(uniforms[i].value, \"value\");\r\n        // }\r\n        if (uniforms[i].value instanceof THREE.Vector2 || uniforms[i].value instanceof THREE.Vector3 || uniforms[i].value instanceof THREE.Vector4)\r\n        {\r\n            const vectorFolder = f.addFolder(i);\r\n            for (let j in uniforms[i].value)\r\n            {\r\n                if (j.indexOf(\"isVector\") !== -1)\r\n                {\r\n                    continue;\r\n                }\r\n                vectorFolder.add(uniforms[i].value, j, -10, 10, .001);\r\n            }\r\n        }\r\n        else if (uniforms[i].value instanceof Array)\r\n        {\r\n            const arrayFolder = f.addFolder(i);\r\n            for (let k = 0; k < uniforms[i].value.length; k++)\r\n            {\r\n                arrayFolder.add(uniforms[i].value, `${k}`, uniforms[i].value[ k ]);\r\n            }\r\n        }\r\n        // Skip nulls for now.\r\n        else if (uniforms[i].value === null)\r\n        {\r\n            continue;\r\n        }\r\n        else if (typeof uniforms[i].value === \"number\")\r\n        {\r\n            if (physicalMaterialCustomSetups[ i ])\r\n            {\r\n                if (physicalMaterialCustomSetups[ i ].min === undefined)\r\n                {\r\n                    f.add(uniforms[i], \"value\", physicalMaterialCustomSetups[ i ]).name(i);\r\n                }\r\n                else\r\n                {\r\n                    f.add(\r\n                        uniforms[i], \"value\",\r\n                        physicalMaterialCustomSetups[ i ].min,\r\n                        physicalMaterialCustomSetups[ i ].max,\r\n                        physicalMaterialCustomSetups[ i ].step\r\n                    ).name(i);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                f.add(uniforms[i], \"value\", -10, 10, .01).name(i);\r\n            }\r\n        }\r\n        else if (typeof uniforms[i].value === \"boolean\" || typeof uniforms[i].value === \"string\")\r\n        {\r\n            f.add(uniforms[i], \"value\").name(i);\r\n        }\r\n        else if (i.indexOf(\"Map\") !== -1)\r\n        {\r\n            // TODO: Handle individual maps.\r\n            f.add(uniforms, i, {\r\n                NONE: null\r\n            })\r\n        }\r\n        else\r\n        {\r\n            console.log(\"not added field\", i, uniforms[i].value);\r\n        }\r\n    }\r\n}\r\n\r\nexport function addShaderMaterialToGUI(material, gui)\r\n{\r\n    const f = gui.addFolder(material.name);\r\n\r\n    const materialKeys = Object.keys(material);\r\n    materialKeys.sort((a, b) => a > b ? 1 : -1)\r\n    let i, j;\r\n\r\n    for (j = 0; j < materialKeys.length; j++)\r\n    {\r\n        i = materialKeys[ j ];\r\n        // Skip if in the exceptions map.\r\n        if (physicalMaterialPropsExceptions[ i ])\r\n        {\r\n            continue;\r\n        }\r\n\r\n        // Skip private fields.\r\n        if (i[ 0 ] === \"_\")\r\n        {\r\n            continue;\r\n        }\r\n\r\n        if (material[ i ] instanceof THREE.Color)\r\n        {\r\n            f.addColor(material, i);\r\n        }\r\n        else if (material[ i ] instanceof THREE.Vector2 || material[i] instanceof THREE.Vector3 || material[i] instanceof THREE.Vector4)\r\n        {\r\n            const vectorFolder = f.addFolder(i);\r\n            for (let j in material[ i ])\r\n            {\r\n                if (j.indexOf(\"isVector\") !== -1)\r\n                {\r\n                    continue;\r\n                }\r\n                vectorFolder.add(material[ i ], j, -10, 10, .001);\r\n            }\r\n        }\r\n        else if (material[ i ] instanceof Array)\r\n        {\r\n            const arrayFolder = f.addFolder(i);\r\n            for (let j = 0; j < material[ i ].length; j++)\r\n            {\r\n                arrayFolder.add(material[i], `${j}`, material[ i ][ j ]);\r\n            }\r\n        }\r\n        // Skip nulls for now.\r\n        else if (material[ i ] === null)\r\n        {\r\n            continue;\r\n        }\r\n        else if (typeof material[i] === \"number\")\r\n        {\r\n            if (physicalMaterialCustomSetups[ i ])\r\n            {\r\n                if (physicalMaterialCustomSetups[ i ].min === undefined)\r\n                {\r\n                    f.add(material, i, physicalMaterialCustomSetups[ i ]);\r\n                }\r\n                else\r\n                {\r\n                    f.add(\r\n                        material, i,\r\n                        physicalMaterialCustomSetups[ i ].min,\r\n                        physicalMaterialCustomSetups[ i ].max,\r\n                        physicalMaterialCustomSetups[ i ].step\r\n                    );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                f.add(material, i, -10, 10, .01);\r\n            }\r\n        }\r\n        else if (typeof material[ i ] === \"boolean\" || typeof material[i] === \"string\")\r\n        {\r\n            f.add(material, i);\r\n        }\r\n        else if (i.indexOf(\"Map\") !== -1)\r\n        {\r\n            // TODO: Handle individual maps.\r\n            f.add(material, i, {\r\n                NONE: null\r\n            })\r\n        }\r\n        else\r\n        {\r\n            console.log(\"not added field\", i, material[i]);\r\n        }\r\n    }\r\n}\r\n\r\nexport function addPhysicalMaterialToGUI (material, gui)\r\n{\r\n    if (!(material instanceof THREE.MeshPhysicalMaterial))\r\n    {\r\n        return;\r\n    }\r\n\r\n    const f = gui.addFolder(material.name);\r\n\r\n    // Add noniterable properties.\r\n    f.add(material, \"clearcoat\", 0, 1, .001);\r\n    f.add(material, \"reflectivity\", 0, 1, .001);\r\n    f.add(material, \"iridescence\", 0, 1, .001);\r\n    f.add(material, \"transmission\", 0, 1, .001);\r\n    f.add(material, \"anisotropy\", 0, 1, .001);\r\n    f.add(material, \"dispersion\", 0, 1, .001);\r\n\r\n    const materialKeys = Object.keys(material);\r\n    materialKeys.sort((a, b) => a > b ? 1 : -1)\r\n    let i, j;\r\n\r\n    for (j = 0; j < materialKeys.length; j++)\r\n    {\r\n        i = materialKeys[ j ];\r\n        // Skip if in the exceptions map.\r\n        if (physicalMaterialPropsExceptions[ i ])\r\n        {\r\n            continue;\r\n        }\r\n\r\n        // Skip private fields.\r\n        if (i[ 0 ] === \"_\")\r\n        {\r\n            continue;\r\n        }\r\n\r\n        if (material[ i ] instanceof THREE.Color)\r\n        {\r\n            f.addColor(material, i);\r\n        }\r\n        else if (material[ i ] instanceof THREE.Vector2 || material[i] instanceof THREE.Vector3 || material[i] instanceof THREE.Vector4)\r\n        {\r\n            const vectorFolder = f.addFolder(i);\r\n            for (let j in material[ i ])\r\n            {\r\n                if (j.indexOf(\"isVector\") !== -1)\r\n                {\r\n                    continue;\r\n                }\r\n                vectorFolder.add(material[ i ], j, -10, 10, .001);\r\n            }\r\n        }\r\n        else if (material[ i ] instanceof Array)\r\n        {\r\n            const arrayFolder = f.addFolder(i);\r\n            for (let j = 0; j < material[ i ].length; j++)\r\n            {\r\n                arrayFolder.add(material[i], `${j}`, material[ i ][ j ]);\r\n            }\r\n        }\r\n        // Skip nulls for now.\r\n        else if (material[ i ] === null)\r\n        {\r\n            continue;\r\n        }\r\n        else if (typeof material[i] === \"number\")\r\n        {\r\n            if (physicalMaterialCustomSetups[ i ])\r\n            {\r\n                if (physicalMaterialCustomSetups[ i ].min === undefined)\r\n                {\r\n                    f.add(material, i, physicalMaterialCustomSetups[ i ]);\r\n                }\r\n                else\r\n                {\r\n                    f.add(\r\n                        material, i,\r\n                        physicalMaterialCustomSetups[ i ].min,\r\n                        physicalMaterialCustomSetups[ i ].max,\r\n                        physicalMaterialCustomSetups[ i ].step\r\n                    );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                f.add(material, i, -10, 10, .01);\r\n            }\r\n        }\r\n        else if (typeof material[ i ] === \"boolean\" || typeof material[i] === \"string\")\r\n        {\r\n            f.add(material, i);\r\n        }\r\n        else if (i.indexOf(\"Map\") !== -1)\r\n        {\r\n            // TODO: Handle individual maps.\r\n            f.add(material, i, {\r\n                NONE: null\r\n            })\r\n        }\r\n        else\r\n        {\r\n            console.log(\"not added field\", i, material[i]);\r\n        }\r\n    }\r\n}\r\n","precision mediump float;\r\nprecision mediump int;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\n\r\nvoid main()\r\n{\r\n\tvec4 modelPosition = modelMatrix * vec4(position, 1.0f);\r\n\tvec4 viewPosition = viewMatrix * modelPosition;\r\n\tvec4 projectedPosition = projectionMatrix * viewPosition;\r\n\r\n\tvUv = uv;\r\n\tvNormal = normal;\r\n\r\n\tgl_Position = projectedPosition;\r\n}\r\n","precision mediump float;\r\nprecision mediump int;\r\n\r\nuniform sampler2D uEnvMap;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\n\r\nvoid main()\r\n{\r\n\tvec4 t = texture2D(uEnvMap, vUv);\r\n\r\n\t// vec4 c = vec4(vUv, 0.0, 1.0);\r\n\tvec4 c = vec4(t.xyz, 1.0);\r\n\t// vec4 c = vec4(1.0, 0.0, 0.0, 1.0);\r\n\tgl_FragColor = c;\r\n}\r\n","import './style.css'\r\n\r\nimport * as THREE from \"three\";\r\nimport * as dat from \"lil-gui\";\r\nimport { MeshTransmissionMaterial } from \"./extensions/MeshTransmissionMaterial\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport { EXRLoader } from 'three/examples/jsm/Addons.js';\r\nimport { RGBELoader } from 'three/examples/jsm/Addons.js';\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\r\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\r\nimport { MeshSurfaceSampler } from \"three/addons/math/MeshSurfaceSampler.js\";\r\nimport { VertexNormalsHelper } from \"three/addons/helpers/VertexNormalsHelper.js\";\r\n\r\nimport { MeshRefractionMaterial } from './shaders/MeshRefractionMaterial';\r\nimport MeshGemMaterial from \"./shaders/MeshGemMaterial\";\r\nimport { MeshBVHUniformStruct, MeshBVH, SAH } from 'three-mesh-bvh'\r\n\r\nimport * as utils from \"./utils\";\r\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\r\n\r\nimport gemVertexShader from \"./shaders/DiamondShader2_2.vert\";\r\nimport gemFragmentShader from \"./shaders/DiamondShader_20230112_2.frag\";\r\nimport emeraldVert from \"./shaders/emeraldVert.glsl\";\r\nimport emeraldFrag from \"./shaders/emeraldFrag.glsl\";\r\n\r\nconst GEM_ENVMAP_RT_SIZE = 256;\r\n\r\nlet scene, camera, renderer, stats;\r\nlet renderer2;\r\nlet controls;\r\nlet loadedGlbs = [];\r\nlet shaderMaterials = {};\r\nlet physicalMaterials = {};\r\nlet exrCubeRT = undefined;\r\nlet cubeRT = undefined;\r\nlet pmremGenerator, pmremGenerator2 = undefined;\r\n\r\nwindow.physicalMaterials = physicalMaterials;\r\nconst materialsToUpdate = {};\r\nwindow.materialsToUpdate = materialsToUpdate;\r\n\r\nconst shaders = {\r\n    emerald: {\r\n        vertexShader: emeraldVert,\r\n        fragmentShader: emeraldFrag\r\n    }\r\n};\r\n\r\nconst refractionMaterialProps = {\r\n    diamond: {\r\n        bounces: 3,\r\n        ior: 2,\r\n        // fresnel: 4.5,\r\n        fresnel: 1.34,\r\n        aberrationStrength: 0,//.005,\r\n        color: new THREE.Color(\"white\"),\r\n        fastChroma: true\r\n    }\r\n};\r\n\r\nconst physicalMaterialProps = {\r\n    emerald: {\r\n        transmission: 1,\r\n        // thickness: 35,\r\n        thickness: 0,\r\n        ior: 1.560,\r\n        iridescence: 0,\r\n        iridescenceIOR: 2,\r\n        reflectivity: .5,\r\n        // roughness: .25,\r\n        roughness: 0,\r\n        side: THREE.DoubleSide,\r\n        // color: new THREE.Color(0x0dbf6c)\r\n        color: new THREE.Color(0.050980392156862744, 0.7490196078431373, 0.4235294117647059)\r\n    },\r\n\r\n    diamond: {\r\n        transmission: 1,\r\n        thickness: 3,\r\n        ior: 2.75,\r\n        iridescence: 0,\r\n        iridescenceIOR: 2,\r\n        reflectivity: .5,\r\n        roughness: .105,\r\n        side: THREE.DoubleSide,\r\n        // color: new THREE.Color(0x0dbf6c)\r\n        color: new THREE.Color(1, 1, 1)\r\n    },\r\n\r\n    diamondLarge: {\r\n        transmission: 1,\r\n        thickness: 35,\r\n        ior: 2.75,\r\n        iridescence: 0,\r\n        iridescenceIOR: 2,\r\n        reflectivity: .5,\r\n        roughness: .105,\r\n        side: THREE.DoubleSide,\r\n        // color: new THREE.Color(0x0dbf6c)\r\n        color: new THREE.Color(1, 1, 1)\r\n    }\r\n};\r\n\r\nconst gui = new dat.GUI({ width: 400 });\r\n\r\n// DEBUG.\r\nwindow.loadedGlbs = loadedGlbs;\r\nwindow.THREE = THREE;\r\n\r\n/**\r\n * Loaders\r\n */\r\n// Texture loader\r\nconst textureLoader = new THREE.TextureLoader();\r\nconst cubeTextureLoader = new THREE.CubeTextureLoader();\r\nconst exrLoader = new EXRLoader();\r\nconst rgbeLoader = new RGBELoader();\r\n\r\n// Draco loader\r\nconst dracoLoader = new DRACOLoader();\r\ndracoLoader.setDecoderPath(\"draco/\");\r\n\r\n// GLTF loader\r\nconst gltfLoader = new GLTFLoader()\r\ngltfLoader.setDRACOLoader(dracoLoader);\r\n\r\nconst modelAssets = [\r\n    // \"models/2a2dcde6-1ced-4119-b76c-7412a451e998.glb\",\r\n    // \"models/aliel_demo_4.glb\"\r\n    \"models/demo-ring.gltf\"\r\n    // \"models/demo_ring.glb\"\r\n    // \"models/cocktail-ring.glb\"\r\n    // \"models/swar_neck.glb\"\r\n];\r\n\r\nlet textures = {};\r\nlet environments = {};\r\n\r\nfunction loadTextureAssets()\r\n{\r\n    textures.diamondSpecular = textureLoader.load(\"./maps/spec19.png\");\r\n    textures.diamondNormal = textureLoader.load(\"./maps/diamond_NormalSpheremap.png\");\r\n    textures.emstatic = textureLoader.load(\"./maps/em_static.png\");\r\n    environments.main = cubeTextureLoader.load([\r\n        \"./maps/3/px.jpg\",\r\n        \"./maps/3/nx.jpg\",\r\n        \"./maps/3/py.jpg\",\r\n        \"./maps/3/ny.jpg\",\r\n        \"./maps/3/pz.jpg\",\r\n        \"./maps/3/nz.jpg\",\r\n    ]);\r\n}\r\n\r\nasync function loadHDRAssets()\r\n{\r\n    const assets = [\r\n        \"./maps/brown_photostudio_02_4k.hdr\",\r\n        \"./maps/bethnal_green_entrance_4k.hdr\",\r\n    ];\r\n\r\n    const loadingPromises = [];\r\n\r\n    for (let i = 0; i < assets.length; i++)\r\n    {\r\n        const p = rgbeLoader.loadAsync(assets[ i ])\r\n        p.then( function (texture)\r\n        {\r\n            texture.mapping = THREE.EquirectangularReflectionMapping;\r\n            texture.generateMipmaps = true;\r\n            texture.minFilter = THREE.LinearMipmapLinearFilter;\r\n            texture.magFilter = THREE.LinearFilter;\r\n            const pmrem = pmremGenerator.fromEquirectangular(texture);\r\n            environments[ `asset${i}` ] = { texture, pmrem: pmrem.texture };\r\n\r\n            const pmrem2 = pmremGenerator2.fromEquirectangular(texture);\r\n            environments[ `asset_pm2${i}` ] = { texture, pmrem: pmrem2.texture };\r\n        })\r\n        loadingPromises.push(p);\r\n    }\r\n\r\n    return Promise.all(loadingPromises);\r\n}\r\n\r\nasync function loadEXRAssets()\r\n{\r\n    let resolve, reject;\r\n    let resolve2, reject2;\r\n    const p = new Promise((res, rej) =>\r\n    {\r\n        resolve = res;\r\n        reject = rej;\r\n    });\r\n\r\n    exrLoader.load(\"./maps/env-gem-4.exr\", function (texture)\r\n    {\r\n        texture.mapping = THREE.EquirectangularReflectionMapping;\r\n        // exrCubeRT = pmremGenerator.fromEquirectangular(texture);\r\n        // cubeRT = new THREE.WebGLCubeRenderTarget(texture.image.width)\r\n        // environments.mainEXRCube = cubeRT.fromEquirectangularTexture(renderer, exrCubeRT.texture)\r\n        environments.mainEXR = texture;\r\n        resolve(true);\r\n    });\r\n\r\n    const p2 = new Promise((res, rej) =>\r\n    {\r\n        resolve2 = res;\r\n        reject2 = rej;\r\n    });\r\n\r\n    exrLoader.load(\"./maps/env-metal-14.exr\", function (texture)\r\n    {\r\n        texture.mapping = THREE.EquirectangularReflectionMapping;\r\n        const exrCubeRT = pmremGenerator.fromEquirectangular(texture);\r\n        const cubeRT = new THREE.WebGLCubeRenderTarget(texture.image.width)\r\n        environments.metalEXRCube = cubeRT.fromEquirectangularTexture(renderer, exrCubeRT.texture)\r\n        environments.metalEXR = texture;\r\n        resolve2(true);\r\n    });\r\n\r\n    return Promise.all([p, p2]);\r\n}\r\n\r\nfunction loadModelAssets()\r\n{\r\n    const loadingPromises = [];\r\n\r\n    const loadModel = (i) =>\r\n    {\r\n        let resolver;\r\n\r\n        const p = new Promise((res, rej) =>\r\n        {\r\n            resolver = res;\r\n        });\r\n\r\n        // Setting promises and glbs using index to ensure correctness of models order.\r\n        // In this case order is going to match modelAssets list.\r\n        loadingPromises[i] = p;\r\n\r\n        gltfLoader.load(modelAssets[i], (glbModel) =>\r\n        {\r\n            loadedGlbs[i] = glbModel;\r\n            resolver();\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < modelAssets.length; i++)\r\n    {\r\n        loadModel(i);\r\n    }\r\n\r\n    return loadingPromises;\r\n}\r\n\r\nfunction setupShaderMaterials()\r\n{\r\n    shaderMaterials[\"emerald\"] = new THREE.ShaderMaterial({\r\n        vertexShader: shaders.emerald.vertexShader,\r\n        fragmentShader: shaders.emerald.fragmentShader,\r\n        // side: THREE.DoubleSide,\r\n        uniforms: {\r\n            uEnvMap: {\r\n                value: textures.emstatic\r\n            }\r\n        }\r\n        // uniforms: Object.assign({}, THREE.UniformsUtils.clone(THREE.ShaderLib.phong.uniforms),\r\n        // {\r\n\r\n        // }),\r\n    });\r\n}\r\n\r\nfunction applyPhysicalMaterialProps(material, props)\r\n{\r\n    for (let i in props)\r\n    {\r\n        if (props[i] instanceof THREE.Color)\r\n        {\r\n            material[i].set(props[i]);\r\n        }\r\n        else\r\n        {\r\n            material[i] = props[i];\r\n        }\r\n    }\r\n}\r\n\r\nfunction setupTransmissionMaterial()\r\n{\r\n    const transmissionMaterial = Object.assign(new MeshTransmissionMaterial(7), {\r\n        clearcoat: 1,\r\n        clearcoatRoughness: 0,\r\n        transmission: 1,\r\n        chromaticAberration: 0.03,\r\n        anisotrophicBlur: 0.1,\r\n        side: THREE.DoubleSide,\r\n        // Set to > 0 for diffuse roughness\r\n        roughness: 0,\r\n        thickness: 7.5,\r\n        ior: 2.5,\r\n        // Set to > 0 for animation\r\n        distortion: 0.1,\r\n        distortionScale: 0.2,\r\n        temporalDistortion: 0.2\r\n    });\r\n\r\n    const transmissionMaterialSmall = Object.assign(new MeshTransmissionMaterial(7), {\r\n        clearcoat: 1,\r\n        clearcoatRoughness: 0,\r\n        transmission: 1,\r\n        chromaticAberration: 0.03,\r\n        anisotrophicBlur: 0.1,\r\n        side: THREE.DoubleSide,\r\n        // Set to > 0 for diffuse roughness\r\n        roughness: 0,\r\n        thickness: 2.5,\r\n        ior: 2.5,\r\n        // Set to > 0 for animation\r\n        distortion: 0.1,\r\n        distortionScale: 0.2,\r\n        temporalDistortion: 0.2\r\n    });\r\n\r\n    physicalMaterials.transmissionMaterial = transmissionMaterial;\r\n    physicalMaterials.transmissionMaterialSmall = transmissionMaterialSmall;\r\n    utils.addPhysicalMaterialToGUI(transmissionMaterial, gui);\r\n}\r\n\r\nfunction setupGemMaterial(gemMaterial, envMap)\r\n{\r\n    const defines = {};\r\n    // const isCubeMap = isCubeTexture(envMap)\r\n    // const envMap = environments.main;\r\n    // const envMap = environments.mainEXRCube.texture;\r\n    // const envMap = environments.mainEXR;\r\n    const isCubeMap = envMap.isCubeTexture;\r\n    const w = (isCubeMap ? envMap.image[0]?.width : envMap.image.width) ?? 1024\r\n    const cubeSize = w / 4\r\n    const _lodMax = Math.floor(Math.log2(cubeSize))\r\n    const _cubeSize = Math.pow(2, _lodMax)\r\n    const width = 3 * Math.max(_cubeSize, 16 * 7)\r\n    const height = 4 * _cubeSize\r\n    if (isCubeMap)\r\n    {\r\n        defines.ENVMAP_TYPE_CUBEM = ''\r\n        // defines.ENVMAP_TYPE_CUBE = ''\r\n    }\r\n\r\n    // defines.CUBEUV_TEXEL_WIDTH = `${1.0 / width}`\r\n    // defines.CUBEUV_TEXEL_HEIGHT = `${1.0 / height}`\r\n    // defines.CUBEUV_MAX_MIP = `${_lodMax}.0`\r\n    // Add defines from chromatic aberration\r\n    if (refractionMaterialProps.diamond.aberrationStrength > 0)\r\n    {\r\n        defines.CHROMATIC_ABERRATIONS = ''\r\n    }\r\n\r\n    if (refractionMaterialProps.diamond.fastChroma)\r\n    {\r\n        defines.FAST_CHROMA = ''\r\n    }\r\n\r\n    gemMaterial.defines = Object.assign(gemMaterial.defines, defines);\r\n    // gemMaterial.envMap = envMap;\r\n    // gemMaterial.envMapD = envMap;\r\n}\r\n\r\nfunction createGemMaterial()\r\n{\r\n    const gemMaterial = Object.assign(new MeshGemMaterial(), refractionMaterialProps.diamond);\r\n    const r = new THREE.Vector2();\r\n    renderer.getSize(r);\r\n    gemMaterial.resolution = r;\r\n    gemMaterial.side = THREE.FrontSide;\r\n    // gemMaterial.envMap = envMap;\r\n    // gemMaterial.envMapD = envMap;\r\n    gemMaterial.reflectivity = 1;\r\n    gemMaterial.roughness = 0.007;\r\n    gemMaterial.metalness = 0;\r\n    gemMaterial.color = new THREE.Color(\"#ffffff\");\r\n    gemMaterial.transmission = 0//0.032;\r\n    gemMaterial.ior = 2.44;\r\n    gemMaterial.thickness = 1.3;\r\n\r\n    // setupGemMaterial(gemMaterial, environments.mainHDR);\r\n\r\n    return gemMaterial;\r\n}\r\n\r\nfunction setupPhysicalMaterials()\r\n{\r\n    const diamond = new THREE.MeshPhysicalMaterial();\r\n    const emerald = new THREE.MeshPhysicalMaterial();\r\n    const diamondLarge = new THREE.MeshPhysicalMaterial();\r\n\r\n    const defines = {};\r\n    // const isCubeMap = isCubeTexture(envMap)\r\n    // const envMap = environments.main;\r\n    // const envMap = environments.mainEXRCube.texture;\r\n    const envMap = environments.mainEXR || environments.mainHDR;\r\n    const isCubeMap = envMap.isCubeTexture;\r\n    const w = (isCubeMap ? envMap.image[0]?.width : envMap.image.width) ?? 1024\r\n    const cubeSize = w / 4\r\n    const _lodMax = Math.floor(Math.log2(cubeSize))\r\n    const _cubeSize = Math.pow(2, _lodMax)\r\n    const width = 3 * Math.max(_cubeSize, 16 * 7)\r\n    const height = 4 * _cubeSize\r\n    if (isCubeMap)\r\n    {\r\n        defines.ENVMAP_TYPE_CUBEM = ''\r\n        defines.ENVMAP_TYPE_CUBE = ''\r\n    }\r\n\r\n    defines.CUBEUV_TEXEL_WIDTH = `${1.0 / width}`\r\n    defines.CUBEUV_TEXEL_HEIGHT = `${1.0 / height}`\r\n    defines.CUBEUV_MAX_MIP = `${_lodMax}.0`\r\n    // Add defines from chromatic aberration\r\n    if (refractionMaterialProps.diamond.aberrationStrength > 0)\r\n    {\r\n        defines.CHROMATIC_ABERRATIONS = ''\r\n    }\r\n\r\n    if (refractionMaterialProps.diamond.fastChroma)\r\n    {\r\n        defines.FAST_CHROMA = ''\r\n    }\r\n\r\n    const refractionMaterial = Object.assign(new MeshRefractionMaterial(), refractionMaterialProps.diamond);\r\n    renderer.getSize(refractionMaterial.resolution);\r\n    refractionMaterial.side = THREE.FrontSide;\r\n    refractionMaterial.defines = defines;\r\n    refractionMaterial.envMap = envMap;\r\n\r\n    applyPhysicalMaterialProps(emerald, physicalMaterialProps.emerald);\r\n    applyPhysicalMaterialProps(diamond, physicalMaterialProps.diamond);\r\n    applyPhysicalMaterialProps(diamondLarge, physicalMaterialProps.diamondLarge);\r\n\r\n    physicalMaterials[\"emerald\"] = { front: emerald, back: emerald.clone() }\r\n    physicalMaterials[\"diamond\"] = { front: diamond, back: diamond.clone() }\r\n    physicalMaterials[\"diamondLarge\"] = { front: diamondLarge, back: diamondLarge.clone() }\r\n\r\n    physicalMaterials.emerald.back.side = THREE.BackSide\r\n\r\n    physicalMaterials.diamond.front.side = THREE.FrontSide\r\n    physicalMaterials.diamond.back.side = THREE.BackSide\r\n\r\n    physicalMaterials.diamondLarge.front.side = THREE.FrontSide;\r\n    physicalMaterials.diamondLarge.back.side = THREE.BackSide;\r\n    physicalMaterials.refractionMaterial = refractionMaterial;\r\n    physicalMaterials.default = new THREE.MeshPhysicalMaterial();\r\n\r\n    const gemMaterial = Object.assign(new MeshGemMaterial(), refractionMaterialProps.diamond);\r\n    const r = new THREE.Vector2();\r\n    renderer.getSize(r);\r\n    gemMaterial.resolution = r;\r\n    gemMaterial.side = THREE.FrontSide;\r\n    gemMaterial.defines = Object.assign(gemMaterial.defines, defines);\r\n    // gemMaterial.envMap = envMap;\r\n    gemMaterial.envMapD = envMap;\r\n    gemMaterial.reflectivity = 1;\r\n    gemMaterial.roughness = 0.007;\r\n    gemMaterial.metalness = 0;\r\n    gemMaterial.color = new THREE.Color(\"#ffffff\");\r\n    gemMaterial.transmission = 0.032;\r\n    gemMaterial.ior = 2.44;\r\n    gemMaterial.thickness = 1.3;\r\n\r\n    console.log(gemMaterial.defines)\r\n\r\n    physicalMaterials.gemMaterial = gemMaterial;\r\n\r\n    // utils.addUniformsToGui(gemMaterial.uniforms, gui)\r\n    // // utils.addPhysicalMaterialToGUI(physicalMaterials.default, gui);\r\n    // utils.addPhysicalMaterialToGUI(physicalMaterials.gemMaterial, gui);\r\n}\r\n\r\nfunction setupScene()\r\n{\r\n    // const pl0 = new THREE.PointLight(0xffffff, 10, 100);\r\n    // const pl1 = new THREE.PointLight(0xffffff, 2, 100);\r\n    // const pl2 = new THREE.PointLight(0xffffff, 2, 100);\r\n    // pl0.position.set(0, 2, 0);\r\n    // pl1.position.set(0, 0, 1);\r\n    // pl2.position.set(1, -1, -1);\r\n    // window.pl0 = pl0;\r\n    // scene.add(pl0, pl1, pl2);\r\n\r\n    // scene.background = environments.main;\r\n    // scene.environment = environments.main;\r\n    scene.background = environments.mainEXR || environments.mainHDR;\r\n    // scene.background = new THREE.Color(\"white\");\r\n    scene.environment = environments[\"asset0\"].texture\r\n    // scene.environment = environments.metalEXR;\r\n}\r\n\r\nfunction getBvh(geometry)\r\n{\r\n    const bvh = new MeshBVHUniformStruct();\r\n    bvh.updateFrom(\r\n        new MeshBVH(geometry.clone().toNonIndexed(), { lazyGeneration: false, strategy: SAH })\r\n    );\r\n\r\n    return bvh;\r\n}\r\n\r\nfunction addMeshesToScene()\r\n{\r\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n    const ig = new THREE.IcosahedronGeometry(2, 0);\r\n    const og = new THREE.OctahedronGeometry(1, 0);\r\n    // const ig = new THREE.TorusKnotGeometry( .5, .25, 100, 16 );\r\n    const material = new THREE.MeshPhysicalMaterial();\r\n    material.metalness = .5;\r\n    material.roughness = 0;\r\n\r\n    const mesh = new THREE.Mesh(ig, material);\r\n    const mesh2 = new THREE.Mesh(ig, physicalMaterials.gemMaterial);\r\n    // utils.addPhysicalMaterialToGUI(material, gui);\r\n    // const bvh = getBvh(ig);\r\n    // mesh2.material.bvh = bvh;\r\n    mesh.position.set(-1, 0, 0);\r\n    mesh2.position.set(3, 0, 0);\r\n    // scene.add(mesh);\r\n    // scene.add(mesh2);\r\n    window.scene = scene;\r\n    for (let i = 0; i < loadedGlbs.length; i++)\r\n    {\r\n        console.log(loadedGlbs[i].scene)\r\n        scene.add(loadedGlbs[i].scene);\r\n    }\r\n}\r\n\r\nfunction addTestMeshes()\r\n{\r\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n    const material = new THREE.MeshPhysicalMaterial();\r\n\r\n    for (let i in physicalMaterialProps.emerald)\r\n    {\r\n        material[i] = physicalMaterialProps.emerald[i];\r\n    }\r\n\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    scene.add(mesh);\r\n}\r\n\r\nfunction addObjectPositionAndRotationControls()\r\n{\r\n    const f = gui.addFolder(\"object controls\");\r\n    f.add(scene.rotation, \"x\", -Math.PI, Math.PI);\r\n    f.add(scene.rotation, \"y\", -Math.PI, Math.PI);\r\n    f.add(scene.rotation, \"z\", -Math.PI, Math.PI);\r\n}\r\n\r\nfunction renderEnvMapForMesh(mesh)\r\n{\r\n    const cubeRT = new THREE.WebGLCubeRenderTarget(GEM_ENVMAP_RT_SIZE, {\r\n        type: THREE.HalfFloatType\r\n    });\r\n\r\n    const cubeCamera = new THREE.CubeCamera(0.1, 100, cubeRT);\r\n    const p = new THREE.Vector3();\r\n    mesh.getWorldPosition(p);\r\n    const dir = p.clone().normalize();\r\n    p.addScaledVector(dir, .1);\r\n    cubeCamera.position.copy(p);\r\n    // cubeCamera.setRotationFromQuaternion(mesh.quaternion);\r\n    cubeCamera.update(renderer, scene);\r\n\r\n    return cubeRT.texture;\r\n}\r\n\r\nfunction generateCubeMapsForGems()\r\n{\r\n    const tex = [];\r\n    const ringMesh = loadedGlbs[0].scene;\r\n    let children = ringMesh.children;\r\n    if (children[ 0 ].children && children[ 0 ].children.length > 0)\r\n    {\r\n        children = children[ 0 ].children;\r\n    }\r\n\r\n    let t = performance.now();\r\n\r\n    for (let i = 0; i < children.length; i++)\r\n    {\r\n        const lcName = children[ i ].name.toLowerCase();\r\n        if (lcName.indexOf(\"diamond\") > -1 || lcName.indexOf(\"trillion\") > -1)\r\n        {\r\n            const cubeTexture = renderEnvMapForMesh(children[ i ]);\r\n            setupGemMaterial(physicalMaterials.gemMaterial, cubeTexture);\r\n            tex.push(cubeTexture);\r\n        }\r\n    }\r\n\r\n    window.cubetex = tex;\r\n    console.log(\"cube maps generation took\", performance.now() - t);\r\n}\r\nwindow.generateCubeMapsForGems = generateCubeMapsForGems;\r\n\r\nfunction analyzeGeometry()\r\n{\r\n    const ringMesh = loadedGlbs[ 0 ].scene;\r\n    let ringMetalMesh = undefined;\r\n    ringMesh.updateWorldMatrix();\r\n    ringMesh.traverse(c =>\r\n    {\r\n        const lcName = c.name.toLowerCase()\r\n        if (lcName.indexOf(\"base\") > -1)\r\n        {\r\n            ringMetalMesh = c;\r\n        }\r\n    })\r\n\r\n    if (ringMetalMesh)\r\n    {\r\n        ringMetalMesh.updateWorldMatrix();\r\n        // const geometry = ringMetalMesh.geometry.attributes.position.array;\r\n        // const points = [];\r\n        // const p = new THREE.Vector4();\r\n        // for (let i = 0; i < geometry.length; i += 3)\r\n        // {\r\n        //     p.set(\r\n        //         geometry[ i ],\r\n        //         geometry[ i + 1 ],\r\n        //         geometry[ i + 2 ],\r\n        //         0\r\n        //     )\r\n\r\n        //     p.applyMatrix4(ringMetalMesh.matrixWorld)\r\n\r\n        //     points.push(new THREE.Vector3(\r\n        //         p.x, p.y, p.z\r\n        //     ))\r\n        // }\r\n\r\n        // const { center, radius } = utils.findCircleCenter(points)\r\n        // // center.applyMatrix4(ringMetalMesh.matrix);\r\n        // console.log(center, radius)\r\n\r\n        // const res = utils.detectCircle(ringMetalMesh);\r\n        // console.log(res)\r\n\r\n        // const g = new THREE.BoxGeometry(.1,.1,.1);\r\n        // const m = new THREE.MeshStandardMaterial({ color: 0xff0000 });\r\n        // const testBox = new THREE.Mesh(g, m)\r\n        // testBox.position.copy(center)\r\n        // scene.add(testBox)\r\n    }\r\n}\r\n\r\nfunction processModelAssets()\r\n{\r\n    // This should be named assets though.\r\n    const ringMesh = loadedGlbs[ 0 ].scene;\r\n    // ringMesh.rotation.set(-Math.PI * .5, 0, 0);\r\n    let emerald;\r\n    let vnh;\r\n    const additionalMeshes = [];\r\n    let children = ringMesh.children;\r\n    if (children[ 0 ].children && children[ 0 ].children.length > 0)\r\n    {\r\n        children = children[ 0 ].children;\r\n    }\r\n\r\n    console.log(children)\r\n\r\n    for (let i = 0; i < children.length; i++)\r\n    {\r\n        const lcName = children[i].name.toLowerCase();\r\n        // if (lcName.indexOf(\"diamond\") > -1)\r\n        // // if (lcName.indexOf(\"trillion\") > -1)\r\n        // {\r\n        //     const diamondMesh = children[i];\r\n        //     diamondMesh.material.dispose();\r\n        //     // const diamondMeshClone = diamondMesh.clone();\r\n        //     // diamondMesh.material.map = textures.diamondSpecular;\r\n        //     // diamondMesh.material.normalMap = textures.diamondNormal;\r\n        //     // diamondMesh.material.normal\r\n\r\n        //     // diamondMesh.material = physicalMaterials.transmissionMaterialSmall\r\n        //     // diamondMesh.material = physicalMaterials.refractionMaterial;\r\n        //     // diamondMesh.material = physicalMaterials.default;\r\n        //     diamondMesh.material = physicalMaterials.gemMaterial;\r\n        //     const bvh = new MeshBVHUniformStruct();\r\n        //     bvh.updateFrom(\r\n        //         new MeshBVH(diamondMesh.geometry.clone().toNonIndexed(), { lazyGeneration: false, strategy: SAH })\r\n        //     );\r\n        //     diamondMesh.material.bvh = bvh;\r\n\r\n        //     // diamondMesh.material.bvh = new MeshBVHUniformStruct();\r\n        //     // diamondMesh.material.bvh.updateFrom(\r\n        //     //     new MeshBVH(diamondMesh.geometry.clone().toNonIndexed(), { lazyGeneration: false, strategy: SAH })\r\n        //     // );\r\n        //     diamondMesh.material.needsUpdate = true;\r\n        //     // diamondMeshClone.material = physicalMaterials.diamond.back;\r\n        //     // additionalMeshes.push(diamondMeshClone);\r\n        //     // diamondMesh.material = shaderMaterials.gem;\r\n        // }\r\n        if (lcName.indexOf(\"diamond\") > -1 ||\r\n            lcName.indexOf(\"trillion\") > -1 ||\r\n            lcName.indexOf(\"mesh_1\") > -1 ||\r\n            lcName.indexOf(\"mesh_2\") > -1 ||\r\n            lcName.indexOf(\"marquise\") > -1\r\n        )\r\n        {\r\n            const mesh = children[ i ];\r\n            mesh.material.dispose();\r\n            mesh.material = createGemMaterial();\r\n            mesh.material.bounces = 4;\r\n            mesh.material.ior = 2.33;\r\n            // mesh.material.transmission = 0.075\r\n            const bvh = new MeshBVHUniformStruct();\r\n            bvh.updateFrom(\r\n                new MeshBVH(mesh.geometry.clone().toNonIndexed(), { lazyGeneration: false, strategy: SAH })\r\n            );\r\n            mesh.material.bvh = bvh;\r\n            materialsToUpdate[ mesh.name ] = mesh.material;\r\n\r\n            // if (lcName.indexOf(\"diamond\") > -1)\r\n            // {\r\n            //     const s = lcName.substring(\"diamond\".length);\r\n            //     if (s.length >= 3)\r\n            //     {\r\n            //         if (parseInt(s) < 192)\r\n            //         {\r\n            //             mesh.material.color.set(0, .255, .05);\r\n            //             mesh.material.specularColor.set(0, .255, .05);\r\n            //         }\r\n            //         mesh.material.bounces = 1;\r\n            //     }\r\n            // }\r\n\r\n            if (lcName.indexOf(\"mesh_2\") > -1)\r\n            {\r\n                mesh.material.bounces = 3;\r\n                mesh.material.color.set(0, .255, .05);\r\n                mesh.material.specularColor.set(0, .255, .05);\r\n                mesh.material.ior = 1.87;\r\n            }\r\n        }\r\n        else if (lcName.indexOf(\"emerald\") > -1)\r\n        {\r\n            const emeraldMesh = children[i];\r\n            // const emeraldMeshClone = emeraldMesh.clone();\r\n            // emeraldMesh.material = physicalMaterials.emerald.front;\r\n            // emeraldMesh.material = physicalMaterials.refractionMaterial\r\n            // emeraldMesh.material.bvh = new MeshBVHUniformStruct();\r\n            // emeraldMesh.material.bvh.updateFrom(\r\n                //     new MeshBVH(emeraldMesh.geometry.clone().toNonIndexed(), { lazyGeneration: false, strategy: SAH })\r\n                // );\r\n            emeraldMesh.material.dispose();\r\n            window.emeraldMesh = emeraldMesh;\r\n            emeraldMesh.material = createGemMaterial();\r\n            emeraldMesh.material.bounces = 4;\r\n            emeraldMesh.material.ior = 2.3;\r\n            const bvh = new MeshBVHUniformStruct();\r\n            bvh.updateFrom(\r\n                new MeshBVH(emeraldMesh.geometry.clone().toNonIndexed(), { lazyGeneration: false, strategy: SAH })\r\n            );\r\n            emeraldMesh.material.bvh = bvh;\r\n            // window.emeraldMeshClone = emeraldMeshClone;\r\n            // emeraldMeshClone.material = physicalMaterials.diamondLarge.front;\r\n            // additionalMeshes.push(emeraldMeshClone);\r\n            // emeraldMesh.material.map = textures.diamondSpecular;\r\n            // TODO: setup for emerald.\r\n            // emeraldMesh.material = shaderMaterials.emerald;\r\n            emerald = emeraldMesh;\r\n            utils.addUniformsToGui(emeraldMesh.material.uniforms, gui)\r\n            utils.addPhysicalMaterialToGUI(emeraldMesh.material, gui);\r\n        }\r\n        else if (lcName.indexOf(\"occlud\") > -1 || lcName.indexOf(\"shadow\") > -1)\r\n        {\r\n            children[i].visible = false;\r\n        }\r\n    }\r\n\r\n    children.push(...additionalMeshes);\r\n    console.log(materialsToUpdate)\r\n\r\n\r\n    // for (let i in physicalMaterialProps.emerald)\r\n    // {\r\n    //     console.log(i)\r\n    //     emerald.material[i] = physicalMaterialProps.emerald[i];\r\n    // }\r\n    // vnh = new VertexNormalsHelper(emerald, .1);\r\n    // scene.add(vnh);\r\n}\r\n\r\nfunction update()\r\n{\r\n    controls.update()\r\n    physicalMaterials.refractionMaterial.viewMatrixInverse = camera.matrixWorld;\r\n    physicalMaterials.refractionMaterial.projectionMatrixInverse = camera.projectionMatrixInverse;\r\n    // physicalMaterials.gemMaterial.uniforms.modelMatrix.value = ;\r\n    physicalMaterials.gemMaterial.uniforms.viewMatrixInverse.value = camera.matrixWorld;\r\n    physicalMaterials.gemMaterial.uniforms.projectionMatrixInverse.value = camera.projectionMatrixInverse;\r\n    if (window.emeraldMesh)\r\n    {\r\n        emeraldMesh.material.uniforms.viewMatrixInverse.value = camera.matrixWorld;\r\n        emeraldMesh.material.uniforms.projectionMatrixInverse.value = camera.projectionMatrixInverse;\r\n    }\r\n\r\n    for (let i in materialsToUpdate)\r\n    {\r\n        materialsToUpdate[ i ].uniforms.viewMatrixInverse.value = camera.matrixWorld;\r\n        materialsToUpdate[ i ].uniforms.projectionMatrixInverse.value = camera.projectionMatrixInverse;\r\n    }\r\n}\r\n\r\nfunction animate()\r\n{\r\n    stats.begin();\r\n    requestAnimationFrame(animate);\r\n    update();\r\n    renderer.render(scene, camera);\r\n    stats.end();\r\n}\r\n\r\nasync function onload()\r\n{\r\n    stats = new Stats(0);\r\n    document.body.appendChild(stats.dom);\r\n    loadTextureAssets();\r\n    await Promise.all(loadModelAssets());\r\n    scene = new THREE.Scene();\r\n    camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        window.innerWidth / window.innerHeight,\r\n        0.1,\r\n        1000\r\n    );\r\n\r\n    renderer = new THREE.WebGLRenderer({\r\n        canvas: document.querySelector(\"canvas\"),\r\n        type: THREE.HalfFloatType,\r\n        antialias: true\r\n    });\r\n\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\r\n\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    renderer2 = new THREE.WebGLRenderer({\r\n        canvas: document.querySelector(\"canvas\"),\r\n        type: THREE.HalfFloatType,\r\n        antialias: true\r\n    });\r\n\r\n    renderer2.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer2.outputColorSpace = THREE.SRGBColorSpace;\r\n\r\n    renderer2.setSize(window.innerWidth, window.innerHeight);\r\n    window.renderer = renderer;\r\n    camera.position.set(0, 0, 1.5);\r\n    window.camera = camera;\r\n\r\n    const f = gui.addFolder(\"camera\");\r\n    f.add(camera.position, \"x\", -5, 5)\r\n    f.add(camera.position, \"y\", -5, 5)\r\n    f.add(camera.position, \"z\", -5, 5)\r\n\r\n    controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enablePan = true\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = .05\r\n    window.controls = controls;\r\n\r\n    pmremGenerator = new THREE.PMREMGenerator( renderer );\r\n    pmremGenerator.compileEquirectangularShader();\r\n\r\n    pmremGenerator2 = new THREE.PMREMGenerator( renderer2 );\r\n    pmremGenerator2.compileEquirectangularShader();\r\n\r\n    // await loadEXRAssets();\r\n    await loadHDRAssets();\r\n    environments.mainHDR = environments[ \"asset0\" ].pmrem;\r\n    window.environments = environments;\r\n\r\n    setupScene();\r\n    setupShaderMaterials();\r\n    setupPhysicalMaterials();\r\n    // setupTransmissionMaterial();\r\n    analyzeGeometry();\r\n    processModelAssets();\r\n    addMeshesToScene();\r\n    scene.traverse((c) =>\r\n    {\r\n        if (c.name.toLowerCase() === \"diamond054\")\r\n        {\r\n            utils.addPhysicalMaterialToGUI(c.material, gui)\r\n        }\r\n    })\r\n    addObjectPositionAndRotationControls();\r\n    // generateCubeMapsForGems();\r\n    // addTestMeshes();\r\n\r\n    gui.close()\r\n    animate();\r\n}\r\n\r\nwindow.onload = onload;\r\n"],"names":["buffer","w","h","THREE.FrontSide","THREE.BackSide","THREE.DoubleSide","gui","THREE.Vector2","THREE.Vector3","THREE.Vector4","j","THREE.MeshPhysicalMaterial","THREE.Color","emeraldVert","emeraldFrag","dat.GUI","THREE.TextureLoader","THREE.CubeTextureLoader","THREE.EquirectangularReflectionMapping","THREE.LinearMipmapLinearFilter","THREE.LinearFilter","THREE.ShaderMaterial","THREE.BoxGeometry","THREE.IcosahedronGeometry","THREE.OctahedronGeometry","THREE.Mesh","THREE.WebGLCubeRenderTarget","THREE.HalfFloatType","THREE.CubeCamera","emeraldMesh","utils.addUniformsToGui","utils.addPhysicalMaterialToGUI","THREE.Scene","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.ACESFilmicToneMapping","THREE.SRGBColorSpace","THREE.PMREMGenerator"],"mappings":"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","x_google_ignoreList":[0]}